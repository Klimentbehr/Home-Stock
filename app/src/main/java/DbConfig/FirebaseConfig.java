package DbConfig;

import android.util.Log;

import androidx.annotation.NonNull;

import com.google.firebase.firestore.FirebaseFirestore;

// map and hash for testing
import java.util.Map;
import java.util.HashMap;

// firebase
import com.google.firebase.firestore.DocumentReference;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.OnFailureListener;


public class FirebaseConfig {

    private FirebaseFirestore db;
    private Map<String, Object> item;
    private static final String TAG = "DbConnection";

    public void ConnectDatabase(){
        db = FirebaseFirestore.getInstance();
        item = new HashMap<>();
    }

    // creates the item data structure to push into the Db.
    // some problems: what does an item need?
    // TODO: figure out what we need inside the Document in the Db
    // example: expirationDate, name, insertDate, lastUpdated, quantity
    // suggestion: since we are saving the variable globally in this class, don't

    // think we need to return anything. it can be void, will think about the
    // implications later!
    public Map<String, Object> CreateItem(String _key, String _value){
        item.put(_key, _value);

        return item;
    }

    // pushes into the db
    // uses the instance we first initialized in the ConnectDatabase, and connects to the specific
    // collection of InventoryItems. The document will be auto-generated by the FirebaseConsole
    // example on how it looks in the Db: https://imgur.com/a/7xbV4NJ
    // in this case, we pushed the _item which had only one field&value.

    // TODO: Figure out how we wanna divide collections
    // problem:
    // 1. we need to save users, items, and what more?
    // 2. should we divide food and other items into different collections?
    // 3. cases for duplicated items; should we use auto-id? to identify them into the Db?
    // 4. checks for bad data before pushing
    // 5. handlers for different collections? we can make switch cases inside this method
    public void InsertDb(Map<String, Object> _item){

        db.collection("InventoryItems")
                .add(_item)
                .addOnSuccessListener(new OnSuccessListener<DocumentReference>() {
                    @Override
                    public void onSuccess(DocumentReference documentReference) {
                        Log.d(TAG, "DocumentSnapshot added with ID: " + documentReference.getId());
                    }
                })
                .addOnFailureListener(new OnFailureListener() {
                    @Override
                    public void onFailure(@NonNull Exception e) {
                        Log.w(TAG, "Error adding document", e);
                    }
                });
    }
}

